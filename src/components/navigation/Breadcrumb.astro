---
import { getCollection } from "astro:content";
import { LocaleKey, getLangFromUrl, getTransalations } from "../../i18n";
import NavItem from "./NavItem.astro";

const PATH_TO_LOCALE: Record<string, LocaleKey> = {
  "/": "nav.home",
  "/tags": "nav.tags",
};

const posts = await getCollection("blog");

function getContent(href: string) {
  if (href.startsWith("/tags")) {
    const tag = href.replace(/.*\/tags\//, "");
    return tag;
  } else if (href.startsWith("/")) {
    const post = posts.find((post) => post.slug === href.substring(1));
    return post?.data.title ?? "";
  }

  return "";
}

type PageItem = {
  href: string;
  content?: LocaleKey;
  isCurrentPage: boolean;
};

const paths = Array.from(new Set(Astro.url.pathname.split("/")));
const items = paths
  .reduce((list: string[], path) => {
    const basepath = (list[list.length - 1] ?? "").replace(/\/$/, "");
    const fullpath = `${basepath}/${path}`;
    list.push(fullpath);
    return list;
  }, [])
  .reduce((list: PageItem[], fullpath) => {
    list.push({
      href: fullpath,
      content: PATH_TO_LOCALE[fullpath],
      isCurrentPage:
        Astro.url.pathname === fullpath ||
        Astro.url.pathname === `${fullpath}/`,
    });
    return list;
  }, []);

const lang = getLangFromUrl(Astro.url);
const t = getTransalations(lang);
---

<nav>
  <ol>
    {
      items.map((item) => {
        const content = item.content ? t(item.content) : getContent(item.href);

        return item.isCurrentPage ? (
          <li class="inline text-lg font-bold">{content}</li>
        ) : (
          <NavItem
            className="after:px-1 after:content-['/']"
            inline
            href={item.href}
          >
            {content}
          </NavItem>
        );
      })
    }
  </ol>
</nav>
